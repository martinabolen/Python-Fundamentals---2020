1.
class Storage:
    def __init__(self,capacity):
        self.capacity=capacity
        self.storage=[]

    def add_product(self,product):
        if len(self.storage) < self.capacity:
            self.storage.append(product)

    def get_products(self):
        return self.storage

storage = Storage(4)
storage.add_product('apple')
storage.add_product('banana')
storage.add_product('potato')
storage.add_product('tomato')
storage.add_product('bread')
print(storage.get_products())


2.
class Weapon:
    def __init__(self,bullets):
        self.bullets=bullets

    def shoot(self):
        if self.bullets>0:
            self.bullets-=1
            return 'shooting...'
        else:
            return 'no bullets left'

    def __repr__(self):
        return f'Remaining bullets: {self.bullets}'
        
        
3.
class Catalogue:
    def __init__(self,name):
        self.name=name
        self.products=[]

    def add_product(self,product):
        self.products.append(product)

    def get_by_letter(self,first_letter):
        new_list=[]
        for element in self.products:
            if element[0]==first_letter:
                new_list.append(element)
        return new_list

    def __repr__(self):
        res= f'Items in the {self.name} catalogue:\n'
        self.products.sort()
        res+='\n'.join(self.products)
        return res


4.
class Town:
    def __init__(self,name):
        self.name=name

    def set_latitude(self,latitude):
        self.latitude=latitude

    def set_longitude(self,longitude):
        self.longitude=longitude

    def __repr__(self):
        return f'Town: {self.name} | Latitude: {self.latitude} | Longitude: {self.longitude}'



5.
class Class:
    __students_count=22

    def __init__(self,name):
        self.name=name
        self.students=[]
        self.grades=[]

    def add_student(self,name, grade):
        if len(self.students) < self.__students_count:
            self.students.append(name)
            self.grades.append(grade)

    def get_average_grade(self):
        return round((sum(self.grades)/len(self.grades)),2)

    def __repr__(self):
        return f'The students in {self.name}: {", ".join(self.students)}.Average grade: {self.get_average_grade()}'



6.
class Inventory:
    def __init__(self,capacity):
        self.__capacity=capacity
        self.items=[]

    def add_item(self,item):
        if len(self.items) >= self.__capacity:
            return 'not enough room in the inventory'
        else:
            self.items.append(item)

    def get_capacity(self):
        return self.__capacity

    def __repr__(self):
        return f'Items: {", ".join(self.items)}.\nCapacity left: {self.__capacity-len(self.items)}'

inventory = Inventory(2)
inventory.add_item('potion')
inventory.add_item('sword')
print(inventory.add_item('bottle'))
print(inventory.get_capacity())
print(inventory)


7.
class Article:
    def __init__(self,title, content, author):
        self.title=title
        self.content=content
        self.author=author

    def edit(self,new_content):
        self.content=new_content

    def change_author(self,new_author):
        self.author=new_author

    def rename(self,new_title):
        self.title=new_title

    def __repr__(self):
        return f'{self.title} - {self.content}: {self.author}'


article = Article('some title','some content','some author')
article.edit('new content')
article.rename('new title')
article.change_author('new author')
print(article)



8.
class Vehicle:
    def __init__(self, type, model, price,owner=None):
        self.type=type
        self.model=model
        self.price=price
        self.owner=owner


    def buy(self,money, owner):
        if money>=self.price and self.owner==None:
            self.owner=owner
            return f'Successfully bought a {self.type}. Change: {money-self.price:.2f}'
        elif money<self.price:
            return f'Sorry, not enough money'
        elif self.owner!=None:
            return 'Car already sold'


    def sell(self):
        if self.owner!=None:
            self.owner=None
        else:
            return 'Vehicle has no owner'

    def __repr__(self):
        if self.owner!=None:
            return f'{self.model} {self.type} is owned by: {self.owner}'
        else:
            return f'{self.model} {self.type} is on sale: {self.price}'

vehicle_type = 'car'
model = 'BMW'
price = 30000
vehicle = Vehicle(vehicle_type,model, price)
print(vehicle.buy(15000,'Peter'))
print(vehicle.buy(35000,'George'))
print(vehicle)
vehicle.sell()
print(vehicle)


9.
class Movie:
    __watched_movies = 0
    def __init__(self,name,director):
        self.name=name
        self.director=director
        self.watched=False



    def change_name(self,new_name):
        self.name=new_name

    def change_director(self,new_director):
        self.director=new_director

    def watch(self):
        if not self.watched:
            self.watched=True
            Movie.__watched_movies += 1

    def __repr__(self):
       return f'Movie name: {self.name}; Movie director: {self.director}. Total watched movies: {Movie.__watched_movies}'

first_movie = Movie('Inception','Christopher Nolan')
second_movie = Movie('The Matrix','The Wachowskis')
third_movie = Movie('The Predator','Shane Black')
first_movie.change_director('Me')
third_movie.change_name('My Movie')
first_movie.watch()
third_movie.watch()
first_movie.watch()
print(first_movie)
print(second_movie)
print(third_movie)

